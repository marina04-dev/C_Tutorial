#include <stdio.h>
#include <stdlib.h>
#define SIZE 80
#define TRUE 1
#define FALSE 0

struct record {
    char name[SIZE];
    char surname[SIZE];
    int age;
    int grade;
}

int open(char *filename, FILE **fp,int *num);

int close(FILE **fp);

int add(FILE *fp);

int read(FILE *fp,int num,int rec,struct record *recd);

int print(struct record temp);

void print_all(FILE *fp,int num);

int modify(FILE *fp,int num,int rec);

int main()
{
    FILE *fp; // file path
    int N; //amount of records of the file
    int choice,check,rec;
    char filename[]="data.dat";
    struct record temp;
    
    while(1) {
        printf("\nMenu");
        printf("\n========================");
        printf("\n1.Open File");
        printf("\n2.Close File");
        printf("\n3.Add Record");
        printf("\n4.Read Record");
        printf("\n5.All Records Printing");
        printf("\n6.Edit Record");
        printf("\n7.Exit");
        printf("\n========================");
        printf("\nChoice: ");
        scanf("%d",&choice);
        
        switch(choice) {
            case 1:
                check=open(filename,&fp,&N);
                if (check==TRUE) {
                    printf("The file has opened!");
                }
                else {
                    printf("Error while opening the file!");
                    exit(0);
                }
                break;
            case 2:
                check=close(&fp);
                if (check==TRUE) {
                    printf("The file has closed!");
                }
                else {
                    printf("Error while closing the file!");
                    exit(0);
                }
                break;
            case 3:
                check=add(fp);
                if (check==TRUE) {
                    printf("The record has been added succesfully!");
                }
                else {
                    printf("Error while adding the record!");
                    exit(0);
                }
                break;
            case 4:
                printf("Which record is your choice?");
                scanf("%d",&rec);
                check=read(fp,N,int rec,&temp);
                if (check==FALSE) {
                    printf("Error at index!");
                    continue;
                }
                printf("The record %d is: ",rec);
                printf(temp);
                break;
            case 5:
                print_all(fp,N);
                break;
            case 6:
                printf("Which record is your choice?");
                scanf("%d",&rec);
                check=modify(fp,N,int rec);
                if (check==FALSE) {
                    printf("Error at index!");
                    continue;
                }
            case 7:
                printf("Exit of the program!");
                exit(0);
            default:
                printf("Wrong choice!");
        }
    }
}

int open(char *filename, FILE **fp,int *num) {
    (*fp)=fopen(filename,"rb");
    // 1st Case: The file does not exist
    if ((*fp)==NULL) {
        (*fp)=fopen(filename,"wb+");
        if ((*fp)==NULL) {
            printf("Error while processing the file's path!");
            return FALSE;
        }
        *num=0;
        return TRUE;
    }
    // 2nd Case: The file already exists
    else {
        fclose(*fp);
        (*fp)=fopen(filename,"rb+");
        if ((*fp)==NULL) {
            printf("Error while processing the file's path!");
            return FALSE;
        }
        (*num)=0;
        while(fread(&temp,sizeof(struct record),1,(*fp)))==1) {
            (*num)++;
        }
        return TRUE;
    }
}

int close(FILE **fp) {
    if (fclose(*fp)==0) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}

int add(FILE *fp) {
    struct record temp;
    printf("Please enter the name: ");
    scanf("%s",temp.name);
    printf("Please enter the surname: ");
    scanf("%s",temp.surname);
    printf("Please enter the age: ");
    scanf("%d",&temp.age);
    printf("Please enter the grade: ");
    scanf("%d",&temp.grade);
    
    fseek(fp,0,SEEK_END);
    if (fwrite(&temp,sizeof(struct record),1,fp)==1) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}

int read(FILE *fp,int num,int rec,struct record *recd) {
    if (rec>=0 && rec<=num-1) {
        fseek(fp,rec*sizeof(struct record),SEEK_SET);
        if (fread(recd,sizeof(struct record),1,fp)==1) {
            return TRUE;
        }
        else {
            return FALSE;
        }
    }
}

int print(struct record temp) {
    printf("\nName: %s",temp.name);
    printf("\nSurname: %s",temp.surname);
    printf("\nAge: %d",temp.age);
    printf("\nGrade: %d\n\n",temp.grade);
}

void print_all(FILE *fp,int num) {
    int i;
    struct record temp;
    
    for (i=0; i<num; i++) {
        read(fp,num,i,&temp);
        printf("\nRecord %d",i);
        printf("\n--------------");
        print(temp);
    }
}

int modify(FILE *fp,int num,int rec) {
    struct record temp;
    if (rec>=0 && rec<=num-1) {
        fseek(fp,rec*sizeof(struct record),SEEK_SET);
        fread(&temp,sizeof(struct record),1,fp);
        printf("The previous record is: \n");
        print(temp);
        printf("Please enter the name: ");
        scanf("%s",temp.name);
        printf("Please enter the surname: ");
        scanf("%s",temp.surname);
        printf("Please enter the age: ");
        scanf("%d",&temp.age);
        printf("Please enter the grade: ");
        scanf("%d",&temp.grade);
        printf("The new record is: \n");
        print(temp);
        
        fseek(fp,rec*sizeof(struct record),SEEK_SET);
        fwrite(&temp,sizeof(struct record),1,fp);
        
        return TRUE;
    }
    else {
        return FALSE;
    }
}
